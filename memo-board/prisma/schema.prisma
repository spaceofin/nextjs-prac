// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id             String          @id @default(cuid())
  name           String?         
  email          String?         @unique
  password       String?
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  memos          Memo[]
  memberOfGroups UserGroup[]
  ownedGroups    Group[]

  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Memo {
  id         Int         @id @default(autoincrement())
  title      String
  content    String
  userId     String
  isPublic   Boolean     @default(false)
  groupMemos GroupMemo[]
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Group {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  ownerId    String
  members    UserGroup[]
  memos      GroupMemo[]
  createdAt  DateTime    @default(now())

  owner      User  @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model UserGroup {
  id      Int   @id @default(autoincrement())
  userId  String
  groupId Int
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
}

model GroupMemo {
  id      Int   @id @default(autoincrement())
  groupId Int
  memoId  Int
  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  memo    Memo  @relation(fields: [memoId], references: [id], onDelete: Cascade)

  @@unique([groupId, memoId])
}